DI(Depandency Injection) 의존성 주입 (객체 주입)
-new를 통해 객체를 생성한다. - 생성
다른 클래스(객체)에서 함수(생성자,setter)를 통해 넣어준다. -주입
인터페이스를 구현해서 다형성을 이용하기때문에 유지보수가 쉽다.

IOC(Inversion Of Control) 제어의 역전 (객체 생성)
-객체를 생성하는 방법은 객체를 순서대로 생성하지만,
주입으로 객체를 생성하는 방법은 역방향으로 생성하게된다.

IOC컨테이너
-DI,IOC 방법으로 객체를 관리하는 컨테이너를 IOC 컨테이너라고 하고 스프링이 이렇게 구성되어 있다.



1. 아래의 개념을 설명하시오.

-DI
객체를 생성하는 방법은 두가지가 있는데 new를 통한방법, 다른 클래스(객체)에서 함수(생성자,setter)를 통해 넣어주는 방법이 있습니다.
의존성 주입은 객체를 직접생성하거나 제어하는 것이 아니라, 특정 객체에 필요한 객체를 외부에서 결정해서 연결시키는 것을 말합니다.
인터페이스를 구현해서 다형성을 이용하기때문에 유지보수가 쉬운 장점이 있습니다.

-IoC
new를 이용해 객체를 생성하는 방법은 객체를 순서대로 생성하지만,
주입으로 객체를 생성하는 방법은 역방향으로 생성하게된다.


-IoC 컨테이너
DI,IOC 방법으로 객체를 관리하는 컨테이너를 IOC 컨테이너라고 하고 스프링이 이렇게 구성되어 있다.



2. 스프링의 장점 및 단점에 대하여 이야기 하여 보세요.

장점  –  개발 시간을 줄일 수 있고 오류로부터 자유로울 수 있다.

단점  –  프레임워크에 너무 의존하면 개발 능력이 떨어져서 프레임워크 없이 개발하는 것이 불가능해진다.




3.  원, 삼각형, 사각형의 객체를 만든후, 반지름 10, 가로 세로 10 인 각각의 넓이를 구하는 프로그램을 작성하시오.
조건) Ioc 컨테이너를 통하여 객체를 생성할것.





4) 아래의 결과를 예측하고, 아래의 부분을 설명하시오.		
var varArrSort = new Array("E", "B", "A", "C", "D");
console.log("varArrSortBefore : " + varArrSort);  => E,B,A,C,D
console.log("varArrSort : " + varArrSort.sort());  => A,B,C,D,E
console.log("varArrSortAfter : " + varArrSort);  => A,B,C,D,E (배열은 immutable)
varArrSort = varArrSort.sort();  // 설명하시오.  
console.log("varArrSortAfter : " + varArrSort); //결과가 왜 그렇게 나오는지 설명하시오
=> A,B,C,D,E



