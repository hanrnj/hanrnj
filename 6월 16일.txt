jsp 파일을 .class로 만들어주는것은 컴파일러가 아니라 WAS(톰켓, 제우스)이다.

localhost ip: 127.0.0.1

클라이언트가 URL 주소를 치고 들어오면 톰켓이 관련된 파일을 .class로 
관리하고 있다가 servlet이 html 파일로 변환하여 웹에 전달한다.

Servlet원리

url에 직접 경로를 입력해서 들어오는 경우는 doget으로 출력,
post방식으로 들어오면 dopost로 출력
request, response를 넘겨준다.

Servlet은 클라이언트의 요청을 받아서 비즈니스 로직 처리, DB에 접근 등의 요청을 처리한 후, 다시 사용자에게 응답하는 것이 주 역할입니다.


톰캣과 같은 WAS 가 java 파일을 컴파일해서 Class로 만들고 메모리에 올려 Servlet 객체를 만들게 되고
이 Servlet 객체는 doPost, doGet을 통해 요청에 응답합니다.

http 프로토콜을 캡슐화시킨것 = servlet
맵핑, doget, dopost, request, response

get 방식 : URL값으로 정보가 전송되어 보안에 약함.
post 방식 : header를 이용해 정보가 전달되어 보안에 강함.

margin / padding 차이점

margin: 0 auto; = 가운데정렬

overflow : 자식이 넘칠때 부모에서 컨트롤 하겠다.



JSP 파일에서 60줄인 코드가 Servlet으로 변환되니 200줄이 되었습니다.

즉, Servlet으로 응답 페이지를 보여주는 것은 비효율적입니다.

그래서 HTML 문서에 Java 코드를 넣을 수 있는 JSP가 필요한 것입니다.

JSP는 MVC 패턴에서 View에 해당합니다.

정리하면 JSP/Servlet을 사용한다는 것은 "모든 요청은 Servlet으로 받고 클라이언트에게 보여 줄 페이지는 JSP로 작성한다"고 할 수 있습니다.




  
1.jsp 가 WAS 에서 돌아가는 원리를 설명하시오.

톰캣과 같은 WAS가 java 파일을 컴파일해서 .Class로 만들고 메모리에 올려 Servlet 객체를 만들게 되고
이 Servlet 객체는 doPost, doGet을 통해 요청에 응답합니다.




2.아래에 대하여 설명하시오.

-doGet

주소창을 타고 데이터가 넘어가기 때문에 

데이터를 사용자가 그대로 볼 수 있으므로 보안에 취약.

ex)Servlet?userid=kim&pass=1234&login=%EB%A1%9C

로그인을 한다고 했을때 위와같이 주소창에 

아이디와 패스워드등이 그대로 노출이됨.

그리고 주소 입력란에 데이터를 전송하는데

글자수에 제한이있어서 대량의데이터가 get방식으로

요청했을경우 데이터가 정상적으로 넘어가지않음.




-doPost

데이터가 html header를 타고 넘어가기에 

주소창에는 데이터가 보여지지 않으므로 보안에 강함

서블릿에 doget() doPost()메서드가 있는데 

요청방식에 따라 호출되는 메서드가 달라짐

보통 <form> 태그를 통해 서버에 전달하거나 요청을 하게되는데

<form action = " -- "  이 부분은 요청할 서블릿 주소를 입력해준다.

      method = " -- "  이 부분에 get,post 중 하나를 선택해서 기입.

<input type = "submit" value = "전송"  전송버튼인 submit을 만듬. 이 버튼을 클릭하게되면 서블릿을 요청

method 속성을 기입하지않고 전송방식을 결정하지 않으면 기본값인 get방식으로 요청하게됨.

<form> 태그 외에도 <a> href= " 서블릿 주소" </a> 태그를 사용하여 링크를 걸어주면 서블릿은 get방식으로 요청한것으로 인식.




-@WebServlet("/hworld")

어노테이션을 활용하면 web.xml에 직접 작성하여 매핑을 할 필요가 없습니다.

위에서 생성한 클래스를 보면 @WebServlet("/hello") 어노테이션을 확인할 수 있습니다.

톰캣은 어노테이션을 확인하여 "해당 Servlet으로 접근하기 위해서는 URL에 /hello로 접근하면 된다"는 매핑을 합니다.

Servlet 클래스를 만들면 자동으로 어노테이션이 생성되고, 이를 수정하여 URL을 바꿀 수도 있습니다.



-HttpServlet

Servlet으로 변환되기 위해서는 기본적으로 다음의 구조를 만족해야 합니다.

톰캣에서 만들어 놓은 HttpServlet 클래스를 상속

HTTP 요청 메서드인 Get방식과 Post 방식을 처리하기 위해 doGet()과 doPost()를 오버라이딩

매개변수로는 HttpServletReqeust, HttpServletResponse 클래스를 정의합니다.






3.float 와 overflow에 대하여 설명하시오.

float는 요소를 왼쪽 또는 오른쪽에 배치할 때 유용한 속성입니다. float 속성을 부여한 요소의 다음 요소는

float 속성을 부여한 요소가 차지하는 위치만 제외하고 나머지 공간을 채우게 됩니다. 

사진을 왼쪽 또는 오른쪽에 배치하고 그 주위를 텍스트로 채울 때 사용하거나, 사이트 레이아웃을 만들 때 사용합니다.



overflow는 내용이 요소의 크기를 벗어났을 때 어떻게 처리할지를 정하는 속성입니다. 

내용이 주어진 공간에 다 들어가지 않을 때, 보여주게 할 수도 있고, 

안 보이게 할 수도 있고, 스크롤바를 만들게 할 수도 있습니다.







4. 아래의 속성을 설명하시오.

-block
display 속성값이 블록(block)인 요소는 언제나 새로운 라인(line)에서 시작하며, 해당 라인의 모든 너비를 차지합니다.

-inline
display 속성값이 인라인(inline)인 요소는 새로운 라인(line)에서 시작하지 않습니다.
또한, 요소의 너비도 해당 라인 전체가 아닌 해당 HTML 요소의 내용(content)만큼만 차지합니다.

-inline-block
inline과 block 두개를 전부 가지고 있는 속성
요소는 inline이고 내부는 block처럼 표시함.

-display:none
display는 요소의 종류를 선택하는 속성.
inline을 block으로 바꿀수도 있고, 그 반대도 가능함.
none은 아무것도 생성하지 않는 상태. 공간이 없음.

-visivility:hidden
요소가 보이지는 않지만, 여전히 그 공간을 차지하며 투명하게 남음.


5.13-1 구현 하시오.

