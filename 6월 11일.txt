
	 request
클라이언트 ---------> 서버
	 <----------	  
	 response

클라이언트의 주체 : 웹브라우저(프로토콜 - 통신규약이 들어있음 : http)

서버의 실체 : 톰켓, 제우스 -> 웹서버 

action = 주소 , method = get, post 방법

# 현재페이지 - 나중에 구현하겠다는 뜻

get 방법 : 내가 보내고싶은 정보가 URL주소에 표시되는 방식 (도메인 쓰고 ? 뒤가 보내고 싶은 정보)

post 방법 : http 헤더에 실어 보내는 방법

name 정보를 실어보낼때 uname = abc 
key = uname
value = abc

name속성은 key를 나타내는것

html 해석은 웹 브라우저가 해준다.

radio 는 name속성을 똑같이 해줘야한다.

block태그 : 알아서 개행해주는 태그 (block)오후 3:54 2020-06-11
inline태그 : 개행을 해줘야하는 태그 (span)



  
1.581page 문제 23-2 정렬의 기준 정하기

import java.util.Comparator;
import java.util.TreeSet;

class ComparatorInteger implements Comparator<Integer> {
	
	public int compare(Integer n1, Integer n2) {
		
		return n2 - n1 ;
	}
}


public class Test7 {

	public static void main(String[] args) {
		
		TreeSet<Integer> tr = new TreeSet<>(new ComparatorInteger());
		
		tr.add(30);
		tr.add(10);
		tr.add(20);
		
		System.out.println(tr);
		
			      
	}

}


2.멀티프로세스와 단일 프로세스의 차이는?

프로세스는 프로그램을 메모리에 올린 상태를 말하는데

단일 프로세스는 한개의 프로그램을 메모리에 올린 상태이고,

멀티 프로세스는 여러개의 프로그램을 메모리에 올린 상태를 말합니다.



3. 아래를  출력하시오.

- (반복자 기반)
- (for-each문 기반)
HashMap<Integer, String> map = new HashMap<>();
   map.put(45, "Brown");
   map.put(37, "James");
   map.put(23, "Martin");

import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

public class Test7 {

	public static void main(String[] args) {
		//-(반복자 기반)
		//- (for-each문 기반)
		
		HashMap<Integer, String> map = new HashMap<>();
		
		   map.put(45, "Brown");
		   map.put(37, "James");
		   map.put(23, "Martin");
		   
		   Set<Integer> kr = map.keySet();
		   
		   for(Iterator<Integer> itr = kr.iterator(); itr.hasNext(); ) {
			   System.out.print(map.get(itr.next())+'\t');
		   }
		   System.out.println();
		   
		   for(Integer k : kr) {
			   
			   System.out.print(map.get(k) + "\t");
		   }
			      
	}

}


4. 아래를 구현 시키기 위한 Person 객체를 작성하시오.

TreeSet<Person> tree = new TreeSet<>(new PersonComparator());

   tree.add(new Person("YOON", 37));
   tree.add(new Person("HONG", 53));
   tree.add(new Person("PARK", 22));

   for(Person p : tree)
      System.out.println(p);
}


import java.util.Comparator;
import java.util.TreeSet;

class Person {
	
	int age;
	String name;
	
	public Person(String name, int age) {
		this.age = age;
		this.name = name;
	}
	
	@Override
	public String toString() {
		return name + " : " + age;
	}
	
	
}

class PersonComparator implements Comparator<Person> {
	
	public int compare(Person p1 , Person p2) {
		
		return p2.age - p1.age;
	}

}


public class Test7 {

	public static void main(String[] args) {
		
		TreeSet<Person> tree = new TreeSet<>(new PersonComparator());

		   tree.add(new Person("YOON", 37));
		   tree.add(new Person("HONG", 53));
		   tree.add(new Person("PARK", 22));

		   for(Person p : tree)
		      System.out.println(p);
		
			      
	}

}



5. 아래를 기반으로 스택을 구현하시오(조별학습).

interface IStack {

    boolean isEmpty();
    boolean isFull();
    void push(int item);
    int pop();
    int peek();
    void clear();
}

public class StackArray implements IStack {
    
    private int top;
    private int stackSize;
    private int stackArr[];

............
.........


면접시 스택정도는 기본적으로 구현할수 있다고 어필할수 있도록 합시다. 
파이이 팅이잉~~~~~



interface IStack {

    boolean isEmpty();
    boolean isFull();
    void push(int item);
    int pop();
    int peek();
    void clear();
}

public class StackArray implements IStack {
    
    private int top;
    private int stackSize;
    private int stackArr[];
    
    //스택을 생성하는 생성자
    public StackArray(int stackSize) {
    	
    	top = -1; //스택 포인터 초기화
    	this.stackSize = stackSize; //스택 사이즈 설정
    	stackArr = new int[this.stackSize]; //스택 배열 생성
    }
    
    //스택이 비어있는 상태인지 확인
    public boolean isEmpty() {
    	// 스택 포인터가 -1인 경우 데이터가 없는 상태이므로 true or false 출력
    	return top == -1;
    }
    
    //스택이 가득찬 상태인지 확인
    public boolean isFull() {
    	
    	//스택 포인터가 스택의 마지막 인덱스와 동일한 경우 true or false 출력
    	return top == this.stackSize-1;
    }
    
    //스택에 데이터를 추가
    public void push(int item) {
    	
    	if(isFull()) {
    		System.out.println("Stack is full");
    	}else
    		stackArr[++top] = item;  //다음 스택 포인터가 가리키는 인덱스에 데이터 추가
    		System.out.println("Inserted Item : " + item);
    }
    
    // 스택의 최상위(마지막) 데이터를 추출 후 삭제
    public int pop() {
    	
    	if(isEmpty()) {
    		
    		System.out.println("Stack is Empty");
    		
    		return 0;
    		
    	}else 
    		System.out.println("Deleted Item : " + stackArr[top]);

    		return stackArr[--top];
    }
    
    //스택의 최상위(마지막) 데이터 추출
    public int peek() {
    
    	if(isEmpty()) {
           
    		 System.out.println("Peeking fail! Stack is empty!");
            
    		 return 0;
    		 
         } else { 
            
        	 System.out.println("Peeked Item : " + stackArr[top]);
            
        	 return stackArr[top];
         }

    }
    
    //스택 초기화
    public void clear() {
    	
    	if(isEmpty()) {
            
    		System.out.println("Stack is already empty!");
       
    	} else {
          
    		top = -1;    // 스택 포인터 초기화
           
    		stackArr = new int[this.stackSize];    // 새로운 스택 배열 생성
           
            System.out.println("Stack is clear!");
       
    	}
    	
    }
    
    // 스택에 저장된 모든 데이터를 출력
    public void printStack() {
        
    	if(isEmpty()) {
         
    		System.out.println("Stack is empty!");
       
    	} else {
         
    		System.out.print("Stack elements : ");
          
    		for(int i=0; i<=top; i++) {
           
    			System.out.print(stackArr[i] + " ");
            }
          
    		System.out.println();
        }
    }


	public static void main(String[] args) {
		
        int stackSize = 5;
        StackArray arrStack = new StackArray(stackSize);
        
        arrStack.push('A');
        arrStack.printStack();
        
        arrStack.push('B');
        arrStack.printStack();
        
        arrStack.push('C');
        arrStack.printStack();
        
        arrStack.pop();
        arrStack.printStack();
        
        arrStack.pop();
        arrStack.printStack();
        
        arrStack.peek();
        arrStack.printStack();
        
        arrStack.clear();
        arrStack.printStack();
	      
	}
}
