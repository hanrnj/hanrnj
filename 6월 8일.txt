제네릭 쓰는이유 

1. 컴파일할 때 타입을 체크해서 에러를 사전에 잡을 수 있다.
2. 컴파일러가 타입캐스팅을 해주기 때문에 개발자가 편리하다.
3. 타입만 다르고 코드의 내용이 대부분 일치할 때, 코드의 재사용성이 좋아진다.

클래스안에서 사용하는 데이터타입을 미리 정의하지 않고, 클래스를 인스턴스화 하는 시점에
데이터타입을 지정해주는 방식을 가능케한다.


프로토콜 = 통신규약 (전화가 오면 벨소리가 울리는 것) http , 5g, lte

wifi 유선인터넷
lte,5g 무선인터넷

port 프로그램 번호 22/kr/index  프로그램 번호 안에서 22번이 관리하는 폴더



1.제네릭을 쓰는 이유는?

1. 컴파일할 때 타입을 체크해서 에러를 사전에 잡을 수 있다.
2. 컴파일러가 타입캐스팅을 해주기 때문에 개발자가 편리하다.
3. 타입만 다르고 코드의 내용이 대부분 일치할 때, 코드의 재사용성이 좋아진다.

클래스안에서 사용하는 데이터타입을 미리 정의하지 않고, 클래스를 인스턴스화 하는 시점에
데이터타입을 지정해주는 방식을 가능케한다.




2.496page 문제 21-1 번을 푸시오.

<문제1번>

class DBox<L, R>{
	private L left;
	private R right;
	public void set(L o, R r) {
		left = o;
		right = r;
	}
	public String toString() {
		return left + " & " + right;
	}
}

class DDBox<U, D> {
	private U up;
	private D down;
	public void set(U o, D r) {
		up = o;
		down = r;
	}
	public String toString() {
		return up + "\n" + down;
	}
}


public class Test {

	public static void main(String[] args) {
		DBox<String, Integer> box1 = new DBox<>();
		box1.set("Apple", 25);
		DBox<String, Integer> box2 = new DBox<>();
		box2.set("Orange", 33);
		
		DDBox<DBox<String, Integer>, DBox<String, Integer>> ddbox = new DDBox<>();
		ddbox.set(box1, box2);
		System.out.println(ddbox);
		
	}

}




<문제 2번>

class DBox<L, R>{
	private L left;
	private R right;
	public void set(L o, R r) {
		left = o;
		right = r;
	}
	public String toString() {
		return left + " & " + right + "\n";
	}
}


public class Test {

	public static void main(String[] args) {
		DBox<String, Integer> box1 = new DBox<>();
		box1.set("Apple", 25);
		DBox<String, Integer> box2 = new DBox<>();
		box2.set("Orange", 33);
		
		DBox<DBox<String, Integer>, DBox<String, Integer>> ddbox = new DBox<>();
		ddbox.set(box1, box2);
		System.out.println(ddbox);
		
	}

}


3.제네릭 메소드란?

전체 클레스가 아닌 일부 메소드를 제네릭으로 정의한 메소드





4.아래가 호출되도록 BoxFactory 클래스를 만드시오.

Box<String> sBox = BoxFactory.<String>makeBox("Sweet");

Box<Double> dBox = BoxFactory.<Double>makeBox(7.59);


class Box<T>{
	private T ob;
	
	public void set(T o) {
		ob = o;
	}
	public T get() {
		return ob;
	}
}

class BoxFactory{
	
	public static <T> Box<T> makeBox(T b){
		Box<T> box = new Box<T>();
		box.set(b);
		return box;
	}
}


public class Test {

	public static void main(String[] args) {
		Box<String> sBox = BoxFactory.<String>makeBox("Sweet");
		System.out.println(sBox.get());

		Box<Double> dBox = BoxFactory.<Double>makeBox(7.59);
		System.out.println(dBox.get());
	}

}





5.다음용어를 정리하시오.

-http - 프로토콜 = 통신규약

-도메인네임 - 인터넷상에서 개인이 소유하고 있는 인터넷 주소의 이름. 보통 영문이나 한글로 표기

-포트번호 - 포트는 외부와 통신하기 위한 대문, 프로그램 번호