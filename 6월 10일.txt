1.Collection framework 의 상속 관계를 그리시오.

		Collection<E>
					Map<K , V>
	Set<E>	List<E>	Queue<E>	


2.List 의 특징은 무엇인가요?

List 컬렉션은 인덱스 순서로 저장이 되며, 중복된 데이터가 저장이 가능하다. 

구조적으로 데이터를 일렬로 늘여놓는 구조를 갖는다. 객체(데이터 등)를 저장하면 

인덱스가 자동으로 부여되고 부여된 인덱스를 통해 데이터의 검색 및 삭제가 가능하다.



3.ArrayList 와 LinkedList 의 차이는?

ArrayList는 List 인터페이스를 구현한 클래스이다. 
설정된 저장 용량(capacity)보다 많은 데이터가 들어오면 자동으로 용량이 늘어난다. 
ArrayList를 생성하는 방법은 아래와 같다.
List<E> 객체명 = new ArrayList<E>([초기 저장용량]);
초기 저장용량을 생략하면 기본적으로 10의 저장용량을 갖는다. 
E는 제네릭 타입을 의미하는데 생략하면 Object 타입이 된다. 
Object는 모든 데이터 타입을 저장 가능하지만 데이터를 추가하거나 검색할 때 형 변환을 해야 한다. 
자료구조에는 주로 동일한 데이터 타입을 저장하기 때문에 제네릭 타입을 지정하고 사용하는 것이 좋다. 
기본적으로 데이터를 추가할 때는 인덱스 순으로 자동 저장된다. 이때 중간에 데이터를 추가하거나 삭제할 경우에는 인덱스가 한 칸씩 뒤로 밀리거나 당겨진다. 


List의 구현 클래스이므로 ArrayList나 Vector와 사용 방법은 동일하다. 하지만 구조는 다르게 구성되어
있다. 위의 컬렉션들은 인덱스로 데이터를 관리하지만 LinkedList는 인접한 곳을 링크하여 체인처럼 관리한다. 
LinkedList는 중간의 데이터를 삭제할 때 인접한 곳의 링크만을 변경하면 되기 때문에 중간에 데이터를 추가/삭제하는 경우 처리 속도가 빠르다. 
상황에 따라 적절한 컬렉션을 사용하면 된다. 
LinkedList를 생성하는 방법은 아래와 같다.
List<E> list = new LinkedList<E>();




4.아래의 List 객체에서 순차적 접근방법 3가지로 출력하시오.

-list가 가지는 get
-enhenced for
-iterator 객체

   List<String> list = new LinkedList<>();   
   
   // 컬렉션 인스턴스에 문자열 인스턴스 저장
   list.add("Toy");
   list.add("Box");
   list.add("Robot");
=============

public class Test4 {

	public static void main(String[] args) {
		
		List<String> list = new LinkedList<>();  
		Iterator<String> irt = list.iterator();
		
		list.add("Toy");
		list.add("Box");
		list.add("Robot");
		
		String s ;
		
		for(int i = 0; i < list.size(); i++) {
			
		s = list.get(i);
		
		System.out.print(s + '\t');
		
		}
		System.out.println();
		
		for(String a : list) {
			
			System.out.print(a + '\t');
		}
		
		
		if(irt.hasNext()) {
			
			System.out.print(irt.next() + '\t');
		}
		
	}
}


5.hasSet을 이용하여 로또 번호를 뽑아내시오.

import java.util.HashSet;
import java.util.Random;

class Loto {
	
	private int num;
	
	public Loto(int num) {
		
		this.num = num;
	}
	
	@Override
	
	public String toString() {
		
		return String.valueOf(num);
	}
	
	@Override
	
	public int hashCode() {
		return 0;
	}
	
	@Override
	
	public boolean equals(Object obj) {
		
		if(num == ((Loto)obj).num) {
			
			return true;
			
		}else 
			
			return false;
	}
	
}



public class Test6 {

	public static void main(String[] args) {
		
		HashSet<Loto> loto = new HashSet<>();
		
		Random rand = new Random();
		
		while(true) {
			loto.add(new Loto(rand.nextInt(44)+1));

			if(loto.size()==6) {

				break;
			}
		}
			System.out.println(loto.toString());

	}

}






6.아래를 인스턴스 수가 2가 나오도록 수정하시오.      

        HashSet<Num> set = new HashSet<>();
        
        set.add(new Num(7799));
        set.add(new Num(9955));
        set.add(new Num(7799));

        System.out.println("인스턴스 수: " + set.size());


import java.util.HashSet;

class Num {
	
	private int num;
	
	public Num(int num) {
		
		this.num = num;
	}
	
	@Override
	public int hashCode() {
		
		return num % 3;
	}
	
	@Override
	public boolean equals(Object obj) {
		
		if(num == ((Num)obj).num){
			return true;
		}else
		 	return false;
	}
}





public class Test5 {

	public static void main(String[] args) {

        HashSet<Num> set = new HashSet<>();
        
        set.add(new Num(7799));
        set.add(new Num(9955));
        set.add(new Num(7799));

        System.out.println("인스턴스 수: " + set.size());

	}

}




7.HashSet의 원리를 설명하시오.

HashSet은 순서와 상관이 없고, 중복되는 값이 반환되지 않는 특징을 가지고 있습니다.

따라서 데이터와 자료들을 효율적으로 관리하기위해서 object 클래스안에 있는 hashcode 함수를 이용하여 데이터를 분류하고

그 분류된 데이터 안에서 자료들을 저장하고 반환하고 삭제하는 일들을 효율적으로 처리할 수 있도록 만드는 것 입니다.



8.object 의 hashcode 함수에 대하여 설명하시오.

hashcode 함수는 Hashset 원리에서 중복되는 값들을 처리하기 위해 데이터들을 hashcode 주소를 이용하여 분류합니다. 

왜냐하면 hashcode는 object 클래스 안에 존재하는 함수이기 때문에 hashcode 함수를 오버라이딩 하지 않으면

object클래스 안에서 정의된 hashcode 분류 방법인 각각의 데이터가 가진 주소를 통해 데이터를 분류합니다.




9.아래 태그에 대하여 설명하시오.

- form 태그 및 action 속성 및 method 속성

form : 폼은 입력된 데이터를 한 번에 서버로 전송합니다. 전송한 데이터는 웹 서버가 처리하고, 
         결과에 따른 또 다른 웹 페이지를 보여줍니다.

action : 폼을 전송할 서버 쪽 스크립트 파일을 지정합니다.

method : 폼을 서버에 전송할 http 메소드를 정합니다. (GET 또는 POST)


- checkbox 와 radio

checkbox: 체크박스. 다중선택 가능

radio: 동그란 선택 버튼. 하나만 선택 가능

