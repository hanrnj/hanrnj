2차원 배열 구구단

		public static void main(String[] args) {
		int[][] gugu = { 
			{2,3,4,5,6,7,8,9},
			{1,2,3,4,5,6,7,8,9}
		};
		for(int i = 0; i < gugu[0].length; i++) {
			for(int j = 0; j < gugu[1].length; j++) {
				System.out.print(gugu[0][i] + "x" + gugu[1][j] + "=" + gugu[0][i] * gugu[1][j] + "\t");
			}
			System.out.println();
		}
	}


this( ); 생성자 함수 => 생성자 호출
super( ); => 부모의 생성자 호출


================================================================================


1. 아래의 2차원 배열의 그림을 그리시오.

int[][] arr = {

   {11, 22, 33},

   {44, 55, 66}, 

   {77, 88, 99}

};

		for(int i = 0; i < arr.length; i++) {
			for(int j = 0; j < arr[i].length; j++) {
				System.out.print(arr[i][j]+ "\t");
			}
			System.out.println();
		}



----------------------------------------------------------------------------------------------------


2. 아래를 프로그래밍 하시오.

 - 10 개의 배열을 선언후 1부터 100까지의 수를

랜덤하게 생성하여 10개의 배열에 넣는다.

- 아래의 max 변수에 해당 배열의 값중에 최대값을 반환하는 함수를 만드시오. 



int[] arr = new int[10];

int max = getMaxValue(arr) 


public class Array {

	public static int getMaxValue(int[] arr) {
		int max = arr[0];
		
		for(int i = 0; i < arr.length; i++) {
			if(max < arr[i]) {
			max = arr[i];
			}
		}
		return  max;	

	} 
}

import java.util.Random;

public class ArrayTest {

	public static void main(String[] args) {
		int[] arr = new int[10];
		
		Random random = new Random();
		
		for(int i = 0; i < arr.length; i++) {
			arr[i] = (int)(Math.random()*100)+1;
			System.out.println(arr[i]);
		}
		
		int max = Array.getMaxValue(arr) ;
		System.out.println(max);
		

	}

}




--------------------------------------------------------------------------------------------------------------

3. 아래를 프로그래밍 하시오.

 - 10 개의 배열을 선언후 1부터 100까지의 수를

랜덤하게 생성하여 10개의 배열에 넣는다.

- sortArr 에 내림차순으로 sorting 된 배열을 리턴한다.



int[] arr = new int[10];

int[] sortArr = getSortDESC(arr) 


import java.util.Random;

public class RandArray {
	
	public static void main(String[] args) {
		Random rand = new Random();
		int[] arr = new int[10];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = rand.nextInt(100)+1;
			System.out.print(arr[i] + "\t");
		}
		System.out.println();
		

		int[] sortArr = getSortDESC(arr);
		
		for (int e : arr) {
			System.out.print(e + "\t");
		}

	}
	
	
	public static int[] getSortDESC(int[] arr) {
		
		int temp = 0;
		
		for (int i = 0; i < arr.length; i++) {
			for (int j = i + 1; j < arr.length; j++) {
				if (arr[i] < arr[j]) {
					temp = arr[i];
					arr[i] = arr[j];
					arr[j] = temp;
				}
			}
		}
		return arr;
	}

}
	






---------------------------------------------------------------------------------------------------------------------------

6. 아래를 프로그래밍 하시오.

 - Rectangle 배열 4개를 만든후 스캐너 객체로 가로와 세로를 입력하여 4개의 객체를 배열에 할당한다 

- 해당 배열중 넓이가 최대값을 찾아서 리턴



Rectangle[] rec = new Rectangle[3];

........

Rectangle maxRec = getMaxRec(rec) 

s.o.p("최대사각형 넓이는" +maxRec.getArea())

import java.util.Scanner;

public class Test {

	public static void main(String[] args) {
		Rectangle[] rec = new Rectangle[3];

		for (int i = 0; i < 3; i++) {
			Scanner sc = new Scanner(System.in);
			System.out.println((i+1) + "번 사각형 ");
			
			System.out.println("가로 : ");
			int width = sc.nextInt();
			
			System.out.println("세로 : ");
			int height = sc.nextInt();
			
			rec[i] = new Rectangle(width, height);
		}
		
		Rectangle maxRec = Rectangle.getMaxRec(rec);
		System.out.println("최대사각형 넓이는 " + maxRec.getArea());
		

	}


}


public class Rectangle {
	
	int width, height;
	
	Rectangle (int width, int height) {
		this.width = width;
		this.height = height;
	}
	
	int getArea () {
		return width*height;
	}
	
	static Rectangle getMaxRec (Rectangle rec[]) {
		Rectangle max = rec[0];
		
		if (rec[1].getArea() > rec[0].getArea()) {
			max = rec[1];
		} 
		if (rec[2].getArea() > rec[1].getArea()) {
			max = rec[2];
		}
		return max;
		
			/*
		 * for(Rectangle rrec : rec) { if(max.getArea() < rrec.getArea()) { max = rrec;
		 * } }
		 * 
		 * for(int i = 0; i< rec.length; i++) { if(max.getArea() < rec[i].getArea()) {
		 * max = rec[i]; } }
		 */



	}

}





--------------------------------------------------------------------------------------------------------------------------

7. 아래를 프로그래밍 하시오.

 - Rectangle 배열 4개를 만든후 스캐너 객체로 가로와 세로를 입력하여 4개의 객체를 배열에 할당한다 

-  getSortingRec 사각형 배열을 내림차순 정렬한다.

-정렬이 제대로 되었는지 배열에 저장된 객체의 getArea()함수를 순서대로 호출한다.



import java.util.Random;

import java.util.Scanner;

public class Test {

	public static void main(String[] args) {

		Rectangle[] rec = new Rectangle[3];
		
		int width, height;

		for (int i = 0; i < rec.length; i++) {
			Scanner sc = new Scanner(System.in);
			
			System.out.println("#" + (i+1) + "번 사각형#");
			System.out.println("가로 : ");
			width = sc.nextInt();
			System.out.println("세로 : ");
			height = sc.nextInt();
			
			rec[i] = new Rectangle(width, height);
		}
		
		
		Rectangle[] recSorting = Rectangle.getSortingRec(rec);
		
		for (int i = 0; i < recSorting.length; i++) {
			System.out.print(recSorting[i].getArea() + "\t");
		}


	}

}



public class Rectangle {

	private int width, height;
	
	public Rectangle (int width, int height) {
		this.width = width;
		this.height = height;
	}
	
	public int getArea() {
		return width*height;
	}
	
	public static Rectangle[] getSortingRec (Rectangle[] rec) {
		
		Rectangle[] blank = new Rectangle[1];
		
		for (int i = 0; i < 3; i++) {
			for (int j = i+1; j < 3; j++) {
				
				if(rec[i].getArea() < rec[j].getArea()) {
					blank[0] = rec[i];
					rec[i] = rec[j];
					rec[j] = blank[0];
				}
			}
		}
		
		return rec;

	}

	

}




------------------------------------------------------------------------------------------------------------

6. 상속이란 무엇인가?

상속이란 부모 클래스가 가지고있는 모든것을(생성자 제외) 자식클래스가 물려받아 같이 공유하며 나아가 확장(extends)하는 개념이다.
부모 클래스를 상위 클래스(superclass)로 부르며 상속받는 자식 클래스를 하위클래스(subclass)라고 부른다.

-------------------------------------------------------------------------------------

7. 다중상속이란?

한명의 자식 클래스가 두명이상의 부모 클래스를 가지고 있는것을 말합니다.


--------------------------------------------------------------------------------------

8. 다음 TV 클래스가 있다.



class TV {

	private int size;

	public TV(int size) { this.size = size; }

	protected int getSize() { return size; }

}



다음 main() 메소드와 실행 결과를 참고하여 TV를 상속받은 ColorTV 클래스를 작성하라.



public static void main(String args[]) {

		colorTV myTV = new ColorTV(32, 1024);

		myTV.printProperty();

	}



=====

출력:32인치 1024컬러



class TV {

	private int size;

	public TV(int size) { this.size = size; }

	protected int getSize() { return size; }

}


class ColorTV extends TV{
	
	private int inch ;
	
	public ColorTV(int size , int inch) {
	super(size);
	this.inch = inch;
	
	}
	
	public int getInch() {
		return inch;
	}
	

	public void printProperty() {
		
		System.out.println(getSize()+ "인치 " +getInch());
		getSize();
	}
}


public class TVTV {

	public static void main(String[] args) {
		ColorTV myTV = new ColorTV(32, 1024);

		myTV.printProperty();

	}

}


------------------------------------------------------------------------------------------------------------------


9. 문제



다음 main() 메소드와 실행 결과를 참고하여 ColorTV를 상속받는 IPTV 클래스를 작성하라.

public static void main(String args[]) {

		IPTV iptv = new IPTV("192.1.1.2", 32, 2048); // "192.1.1.2" 주소에 32인치, 2048 컬러

		iptv.printProperty();

	}

===출력

나의 IPTV는 192.1.1.2 주소의 32 인치 2048컬러

class ColorTV {
	protected int size;

	public ColorTV(int size) { this.size = size; }

	protected int getSize() { return size; }
}

class IPTV extends ColorTV {
	private String juso;
	private int color;
	
	public IPTV( String juso, int size, int color) {
		super(size);
		this.color = color;
		this.juso = juso;
	}

	public void printProperty() {
		System.out.println("나의 IPTV는 " + juso + "주소의" + size + "인치" + color + "컬러");
		super.getSize();
	}
}

public class TvTest {

	public static void main(String[] args) {
		IPTV iptv = new IPTV("192.1.1.2", 32, 2048); // "192.1.1.2" 주소에 32인치, 2048 컬러

		iptv.printProperty();
	}
}




------------------------------------------------------------------------------------------------------------------

10. 다음은 2차원 상의 한 점을 표현하는 Point 클래스이다.



class Point {

	private int x, y;

	public Point(int x, int y) { this.x = x; this.y = y; }

	public int getX() { return x; }

	public int getY() { return y; }

	protected void move(int x, int y) { this.x = x; this.y = y; }

}



Point를 상속받아 색을 가진 점을 나타내는 ColorPoint 클래스를 작성하라. 다음 main() 메소드를 포함하고 실행 결과와 같이 출력되게 하라.

RED 색의 (10,20)의 점 입니다.


-------------------------------------------------------------------------------------------

11.super의 용도 2가지에 대하여 설명하시오.
-부모클래스 생성자 호출.
-부모클래스 함수 호출.



12.protected 에 대하여 설명하시오.
-자식클래스까지 허용가능한 접근자



