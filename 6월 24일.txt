DTO(Value Object) : DB안에있는 컬럼들을 객체화시키기위한 클래스
DAO : DB안에있는 데이터들을 컬렉션프레임워크로 저장하기위한 클래스

접속자가 몰리면 DB연결부분 connection 객체생성 부분이 시간과 비용이 많이 들어간다.

커넥션풀 : 톰캣이 커넥션 객체를 미리 여러개 생성해 놓는다 -> 톰켓서버에
             미리생성되어있기때문에 시간이 빠르다. 만들어놓은 갯수를 넘으면 딜레이된다.


--커미션(comm)의 총액을 구하는 쿼리문
select sum(comm) from emp;

--가장 높은 급여와 가장 낮은 급여를 구하는 쿼리문
SELECT max(sal), min(sal) from emp;

--전체 사원의 수를 구하는 쿼리문
select count(*) from emp;

--사원 테이블의 사원들 중에서 커미션(COMM)을 받은 사원의 수를 구하는 쿼리문
select count(comm) from emp;

--중복 제거를 반영하여 담당업무의 개수를 구하는 쿼리문
select count(distinct job) from emp;

--GROUP BY , HAVING 절
--사원 테이블을 부서 번호로 그룹 짓는 쿼리문
SELECT DISTINCT DEPTNO FROM EMP;
SELECT DEPTNO FROM EMP GROUP BY DEPTNO;

--소속 부서별 평균 급여를 구하는 쿼리문
SELECT AVG(SAL),deptno FROM EMP GROUP BY DEPTNO;

--소속 부서별 급여 총액과 평균 급여를 구하는 쿼리문
SELECT DEPTNO, SUM(SAL), AVG(SAL) FROM EMP GROUP BY DEPTNO;

--소속 부서별 최대 급여와 최소 급여를 구하는 쿼리문
SELECT DEPTNO 부서번호, MAX(SAL) 최대급여, MIN(SAL) 최소급여 FROM EMP GROUP BY DEPTNO;

--부서별 사원의 수와 커미션을 받는 사원의 수를 계산하는 쿼리문
SELECT DEPTNO 부서번호, COUNT(*) 사원의수, COUNT(COMM) FROM EMP GROUP BY DEPTNO;

--그룹 지어진 부서별 평균 급여가 2000 이상인 부서의 번호와 부서별 평균 급여를 출력하는 쿼리문
SELECT DEPTNO 부서번호 , AVG(SAL) 평균급여 FROM EMP GROUP BY deptno HAVING AVG(SAL) >= 2000;

--부서의 SAL 최대값과 최소값을 구하되, 최대 급여가 2900 이상인 부서만 출력하는 쿼리문
SELECT DEPTNO 부서번호,MAX(SAL), MIN(SAL) FROM EMP GROUP BY DEPTNO HAVING MAX(SAL) >= 2900;

--10번 부서의 총급여
SELECT SUM(SAL) 총급여 FROM EMP WHERE DEPTNO = 10;

--부서별/담당 업무별 인원 소계와 급여 소계를 구하는 쿼리문
SELECT DEPTNO, JOB, COUNT(*), SUM(SAL) FROM EMP GROUP BY ROLLUP(DEPTNO,JOB);

--이름이 SMITH인 사람의 부서명을 출력해 보는 쿼리문
SELECT ENAME, DNAME FROM EMP, DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO AND ENAME = 'SMITH';


1.DTO 란 무엇인가?

-DB안에있는 컬럼들을 객체화시키기위한 클래스

-Data Transfer Object의 약자로, 계층간 데이터 교환을 위한 자바빈즈를 뜻한다.
또한 DTO는 VO(Value Object)와 용어를 혼용해서 많이 사용하는데, 
VO는 읽기만 가능한 read only 속성을 가져 DTO와의 차이점이 존재한다.


2.DAO 란 무엇인가?

-DB안에있는 데이터들을 컬렉션프레임워크를 이용하여 저장하기위한 클래스

-Data Access Object의 약자로, 데이터베이스의 데이터에 접근하기 위해 생성하는 객체이다.
데이터베이스에 접근하기 위한 로직과 비즈니스 로직을 분리하기 위해 사용한다.
간단하게, DB에 접속하여 데이터의 CRUD(생성, 읽기, 갱신, 삭제) 작업을 시행하는 클래스이다.
JSP 및 Servlet 페이지 내에 로직을 기술하여 사용할 수 있지만, 코드의 간결화 및 모듈화,
유지보수 등의 목적을 위해 별도의 DAO 클래스를 생성하여 사용하는 것이 좋다.

한 줄 요약 : DAO는 DB를 사용하여 데이터의 조회 및 조작하는 기능을 전담하는 오브젝트이다



3.VO란 무엇인가?

-Value Object 로 DTO와 같다.




4.PreparedStatement 와 Statement 의 차이는?
 
PreparedStatement 와 Statement의 가장 큰 차이점은 캐시(cache) 사용여부이다.

1) 쿼리 문장 분석
2) 컴파일
3) 실행

Statement를 사용하면 매번 쿼리를 수행할 때마다 1) ~ 3) 단계를 거치게 되고, 
PreparedStatement는 처음 한 번만 세 단계를 거친 후 캐시에 담아 재사용을 한다는 것이다. 
만약 동일한 쿼리를 반복적으로 수행한다면 PreparedStatment가 DB에 훨씬 적은 부하를 주며, 성능도 좋다.



5. emp를 VO 객체와 DAO 객체를 만들어, 모두 나타나도록 하시오.

<VO>

package edu.bit.ex.dto;

public class MemberDTO {

	private String empno;
	private String ename;
	private String job;
	private String mgr;
	private String hiredate;
	private String sal;
	private String comm;
	private String deptno;
	
	public MemberDTO() {}

	public MemberDTO(String empno, String ename, String job, String mgr, String hiredate, String sal, String comm,
			String deptno) {
		
		this.empno = empno;
		this.ename = ename;
		this.job = job;
		this.mgr = mgr;
		this.hiredate = hiredate;
		this.sal = sal;
		this.comm = comm;
		this.deptno = deptno;
	}



	public String getEmpno() {
		return empno;
	}

	public void setEmpno(String empno) {
		this.empno = empno;
	}

	public String getEname() {
		return ename;
	}

	public void setEname(String ename) {
		this.ename = ename;
	}

	public String getJob() {
		return job;
	}

	public void setJob(String job) {
		this.job = job;
	}

	public String getMgr() {
		return mgr;
	}

	public void setMgr(String mgr) {
		this.mgr = mgr;
	}

	public String getHiredate() {
		return hiredate;
	}

	public void setHiredate(String hiredate) {
		this.hiredate = hiredate;
	}

	public String getSal() {
		return sal;
	}

	public void setSal(String sal) {
		this.sal = sal;
	}

	public String getComm() {
		return comm;
	}

	public void setComm(String comm) {
		this.comm = comm;
	}

	public String getDeptno() {
		return deptno;
	}

	public void setDeptno(String deptno) {
		this.deptno = deptno;
	}
	
}


<DAO>

package edu.bit.ex.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;

import edu.bit.ex.dto.MemberDTO;

public class MemberDAO {
	
	private String url = "jdbc:oracle:thin:@localhost:1521:xe";
	private String uid = "scott";
	private String upw = "tiger";
	private String driver = "oracle.jdbc.driver.OracleDriver";
	
	public MemberDAO() {
		try {
			Class.forName(driver);
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public ArrayList<MemberDTO> memberSelect(){
		ArrayList<MemberDTO> dtos = new ArrayList<MemberDTO>();
		
		Connection con = null;
		Statement stmt = null;
		ResultSet rs = null;
		String sql = "select * from emp";
		
		
		try {
			
			con = DriverManager.getConnection(url,uid,upw);
			stmt = con.createStatement();
			rs = stmt.executeQuery(sql);
			
			while(rs.next()) {
				String empno = rs.getString("empno");
				String ename = rs.getString("ename");
				String job = rs.getString("job");
				String mgr = rs.getString("mgr");
				String hiredate = rs.getString("hiredate");
				String sal = rs.getString("sal");
				String comm = rs.getString("comm");
				String deptno = rs.getString("deptno");
				
				MemberDTO dto = new MemberDTO(empno, ename, job, mgr, hiredate, sal, comm, deptno);
				dtos.add(dto);
			}
			
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			 try {
		            if(con != null) con.close();
		            if(stmt != null) stmt.close();
		            if(rs != null) rs.close();
		   } catch (Exception e) {}
		}		
		return dtos;
	}	
}


<출력>

<%@page import="edu.bit.ex.dto.MemberDTO"%>
<%@page import="edu.bit.ex.dao.MemberDAO"%>
<%@page import="java.util.ArrayList"%>
<%@ page language="java" contentType="text/html; charset=EUC-KR"
    pageEncoding="EUC-KR"%>
<!DOCTYPE html>
<html>
	<head>
		<meta charset="EUC-KR">
		<title>Insert title here</title>
	</head>
	<body>
		
		<%
			MemberDAO memberDAO = new MemberDAO();
			ArrayList<MemberDTO> dtos = memberDAO.memberSelect();
		
			for(int i = 0; i <dtos.size(); i++){
				MemberDTO dto = dtos.get(i);
				
				String empno = dto.getEmpno();
				String ename = dto.getEname();
				String job = dto.getJob();
				String mgr = dto.getMgr();
				String hiredate = dto.getHiredate();
				String sal = dto.getSal();
				String comm = dto.getComm();
				String deptno = dto.getDeptno();
				
				out.println("사원	번호: " + " " + empno + "이름: " + " " + ename + "직업: " + " " + job + "MGR: " + " " + mgr + "입사날짜: " + " " + hiredate + "월급: " + " " + sal + "COMM : " + " " + comm + "부서번호: " + " " + deptno + "<br />");
			}
		
		%>
		
	</body>
</html>



6.DBCP 에 대하여 설명하시오.

DBCP를 사용하게 되면,
WAS 실행 시 미리 일정량의 DB Connection 객체를 생성하고 Pool 이라는 공간에 저장해 둡니다.
그리고 DB 연결 요청이 있으면, 이 Pool 이라는 공간에서 Connection 객체를 가져다 쓰고 반환 하게 됩니다.



7.CARTESIAN PRODUCT 이란

Query의 From절에 2개 이상의 Table이 있고, 두 Table 사이의 유효한 Join 조건이 기술되어 있지 않은 경우에는 
두 Table의 모든 행들이 무조건 결합하여 Table들에 존재하는 행 갯수를 곱한 만큼의 결과값이 반환되는 것을 
Cartesian Product(카테시안 곱)라고 한다.


8. JOIN 에 대하여 설명하시오.

두개이상의 테이블이나 데이터베이스를 연결하여 데이터를 검색하는 방법입니다. 
자신이 검색하고 싶은 컬럼이 다른 테이블에 있을경우 주로 사용하며 여러개의 테이블을 마치 하나의 테이블인 것처럼 활용하는 방법입니다. 
보통 Primary key로 두 테이블을 연결합니다. 테이블을 연결하려면 적어도 하나의 칼럼은 서로 공유되고 있어야합니다.


9. group by 에 대하여 설명 하고 group by 의 조건을 주는 방법은?

GROUP BY 절은 데이터들을 원하는 그룹으로 나눌 수 있다.
HAVING을 분류한 그룹중에 특정 조건을 만족하는 값을 찾을 수 있다.




--10번 부서의 월급 평균, 최대값, 최소값을 구하시오
SELECT AVG(SAL), MAX(SAL), MIN(SAL) FROM EMP WHERE DEPTNO = 10;

--부서별 월급 평균, 최대값, 최소값을 구하시오.
SELECT DEPTNO, AVG(SAL), MAX(SAL), MIN(SAL) FROM EMP GROUP BY DEPTNO;

--10번 부서에 속한 사람들의 직책별 월급평균을 구하시오
SELECT JOB, AVG(SAL) FROM EMP where deptno = 10 group by job;

--부서별 월급 평균, 최대값, 최소값을 구하되 월급평균이 2000이상인 부서에 대하여 구하시오
SELECT deptno, AVG(SAL), MAX(SAL), MIN(SAL) FROM EMP GROUP BY DEPTNO HAVING AVG(SAL) >= 2000;

--직책별 월급평균, 최대값, 최소값을 구하되 월급의 최대값이 4000보다 큰 직책에 대하여 구하시오
SELECT job, AVG(SAL) 월급평균, MAX(SAL) 최대값, MIN(SAL) 최소값 FROM EMP GROUP BY job HAVING AVG(SAL) > 4000;

--10번 부서에 속한 사람들의 직책별 월급평균을 구하되 월급평균이 3500이하인 직책에 대하여 구하시오.
SELECT JOB, AVG(SAL) FROM EMP where deptno = 10 group by job HAVING AVG(SAL) <= 3500;

--직책이 CLERK인 사람들의 부서별 월급 평균, 최대값을 구하되 월급의 최대값이 3600보다 작은 부서에 대하여 구하시오.
SELECT DEPTNO, AVG(SAL), MAX(SAL), MIN(SAL) FROM EMP WHERE JOB = 'CLERK' GROUP BY DEPTNO HAVING MAX(SAL) < 3600;

--이름에 ER이 들어있는 사람들의 직책별 월급평균, 최대값, 최소값을 구하시오.
SELECT  JOB, AVG(SAL) FROM EMP where ENAME LIKE '%ER%' GROUP BY JOB;
