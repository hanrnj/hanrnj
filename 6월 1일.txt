

1.아래를 다형성의 활용하여 프로그래밍 하시오.



-원의 넓이

-사각형 넓이

-삼각형 넓이

==========

3개 넓이의 총합을 구하는 프로그램을 짜시오


class Shape {
	
	double getArea() {
		return 0;
	}
	
}

class Circle extends Shape {
	private int radius;
	Circle(int radius) {
		this.radius = radius;
	}
	public double getArea() {
		return radius * radius * (int)Math.PI;
	}
}

class Rectangle extends Shape {
	private int width, height;
	Rectangle(int width, int height) {
		this.width = width;
		this.height = height;
	}
	public double getArea() {
		return width * height;
	}
}

class Triangle extends Shape {
	private int width, height;
	Triangle(int width, int height) {
		this.width = width;
		this.height = height;
	}
	public double getArea() {
		return width * height / 2;
	}
}



public class Area {

	public static void main(String[] args) {
		
		Shape[] shapes = new Shape[3];
		
		//polymorphism 부모 is a 자식
		shapes[0] = new Circle(3);
		shapes[1] = new Rectangle(3, 4);
		shapes[2] = new Triangle(5,6);
		
		double totalArea = 0;
		for(Shape shape : shapes) {
			totalArea = totalArea + shape.getArea();
		}
		
		System.out.println(totalArea);
	

	}

}








2. 아래의 출력 결과가 아래와 같이 나오도록 프로그래밍 하시오.

Circle circle = new Circle(10);

Object obj = new Circle(10);

System.out.println(obj);

=================

출력: 넓이는 100 입니다.


class Circle {
	private int radius;
	private final double PI = 3.14;
	
	Circle(int radius) {
		this.radius = radius;
	}
	
	public String toString() {
		return "넓이는 100";
	}
	
 	
}



public class Test {

	public static void main(String[] args) {

		Circle circle = new Circle(10);
		//오버라이딩
		Object obj = new Circle(10);
		System.out.println(obj);
		
	}

}



=> 출력
Circle@15db9742
넓이는 100










3.Object 클래스에 대하여 설명하시오.

자바의 모든 클래스는 Object 클래스를 직접 혹은 간접적으로 상속. 자바의 모든 인스턴스에 공통된 기준 및 규약을 적용하기 위함.



4.아래와 같이 출력을 하는 이유에 대하여 설명하시오.

Circle circle = new Circle(10);

System.out.println(circle);

===============

Circle@15db9742

println 함수는 String 클래스를 참조 값으로 받는다. 

그리고 자바의 모든 클래스는 Object 클래스를 직간접적으로 상속하고, Object 클래스에는 toString 함수가 정의되어 있다. 

println 함수가 참조 값으로 Circle 클래스를 받으면 Object의 자동 상속으로 인해 Circle 클래스는 Object (부모 클래스)의 메소드인 toString 함수를 오버라이딩 한다.

toString함수는 다음과 같이 정의되어 있다.

public String toString() {
        return getClass().getName() + "@" + Integer.toHexString(hashCode());
    }

위 코드에 따르면 클래스명과 그 클래스가 위치한 주소가 반환된다.

return -> Circle@15db9742

System.out.println("Circle@15db9742");

그 결과 Circle@15db9742이 출력된다.





6.@Override 에 대하여 설명하시오.

@override는 컴파일러에게 정의하는 메소드가 오버라이딩을 목적으로 정의되었다는 사실을 알려줍니다.
@override를 적은 경우에는 오버라이딩만을 목적으로 정의하여야 하기 때문에, 상속받는 부모 클래스의 메소드와 다른 이름의
메소드를 정의할 경우 에러 메세지를 뱉습니다.


7.interface 에 대하여 설명하시오.

인터페이스(interface)는 추상클래스보다 훨씬 극단적이고 제한적인 성격을 가집니다.
인터페이스(interface)는 멤버필드와 추상메서드만 정의 할 수 있습니다.
인터페이스(interface)를 상속받을려면 extends를 사용하면 안되고 implements 를 사용하여야 합니다.
인터페이스(interface)는 다중상속이 가능합니다.
인터페이스(interface)의 추상메서드는 일반클래스의 메서드 형식과 같지만 몸통을 가질 수 없습니다.
인터페이스(interface)의 선언은 interface [이름]으로 합니다.

어노테이션. 자바 컴파일러에게 메시지를 전달하는 목적의 메모.
어노테이션이 있으면 컴파일러는 오버라이딩이 제대로 되었는지 확인해준다.



-interface에 올수 있는 두가지는?

상수, 추상 메소드
상수) public static final의 특성을 가진다.

8.abstract 키워드에 대하여 설명하시오.

추상클래스(abstract)는일반클래스보다 조금더 추상적은 개념의 것을 정의한다.
추상클래스(abstract)의 추상 메서드와 그냥 메서드, 멤버필드, 생성자를 정의 할 수 있지만, 추상메서드는 내용을 정의 할 수 없다.
추상클래스(abstract)의 추상메서드를 정의하면 추상클래스를 상속받은 클래스에서는 반드시 추상메서드를 Override 하여 정의하여야 한다.
추상클래스(abstract)는 abstract class [클래스명] 으로 정의한다.
추상클래스(abstract)의 추상메서드는 [접근제한자] abstract [return 자료형] [메서드이름]() 으로 정의한다.
추상클래스(abstract)는 extends 로 상속받는다. 
추상클래스(abstract)는 다중 상속이 안된다.


추상 메소드 (abstract은 자식이 구현).

추상 메소드에는 구현할 수 있는 몸체가 없다. 
그래서 자식 클래스가 인터페이스의 참조변수를 받아 대신 구현해줘야 한다.

