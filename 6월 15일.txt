SMTP : Simple Mail Transper Protocol
Http : Hyper Text Transper Protocol
FTP : File Transper Protocol
PCP : Port Control Protocol
DHCP : Dynamic Host Configuration Protocol

DNS : Domain Name Service ->ip주소를 맵핑한 문자열
Port : 프로그램 번호
톰켓이 관리하는 폴더 : kr/index == contxet name

웹프로그래밍 프로그램 : PHP(보안이 조금 약함) , ASP(MS에서 나온것) , JSP(보안을 신경쓰는쪽)

제우스가 우리나라에서 더 많이 사용되고있다는걸 알고 있지만, 상용이라서 아직 써보지는 못했습니다.
그래서 톰켓을 이용해서 웹 프로그램을 해보았습니다.

웹서버(톰켓,제우스) + WAS(Web Application System) = 웹서버

Appache(웹서버) + tomcat(WAS) => 웹 서버
    html            jsp
.Html 정적
.JSP 동적 , 웹안에 자바 언어를 이용해서 프로그래밍 할 수 있다.

HTML을 동적으로 만들기위해 PHP, ASP, JSP가 만들어졌고,
만들어진 파일을 .Class로 만드는 것이 WAS이다.

px은 상대단위



  
1. 아래의 ThreadWithClass 와 ThreadWithRunnable 을 구현하시오.

public class Thread01 {

    public static void main(String[] args){

        ThreadWithClass thread1 = new ThreadWithClass();       // Thread 클래스를 상속받는 방법

        Thread thread2 = new Thread(new ThreadWithRunnable()); // Runnable 인터페이스를 구현하는 방법 

        thread1.start(); // 스레드의 실행
        thread2.start(); // 스레드의 실행
    }
}


class ThreadWithClass extends Thread{
	
	@Override
	public void run() {
		
		System.out.println(getName());
		
		try {
			
			Thread.sleep(10);
			
		}catch(InterruptedException e) {
			e.printStackTrace();
		}
	}
}

class ThreadWithRunnable implements Runnable{
	
	@Override
	public void run() {
		
		System.out.println(Thread.currentThread().getName());
		
		try {
			
			Thread.sleep(10);
			
		}catch(InterruptedException e) {
			e.printStackTrace();
		}
	}
}

public class Thread01 {

	public static void main(String[] args) {
        ThreadWithClass thread1 = new ThreadWithClass();       // Thread 클래스를 상속받는 방법

        Thread thread2 = new Thread(new ThreadWithRunnable()); // Runnable 인터페이스를 구현하는 방법 

        thread1.start(); // 스레드의 실행
        thread2.start(); // 스레드의 실행

	}

}


2.웹서버와 WAS에 대하여 설명하시오.

Web Server의 개념

소프트웨어와 하드웨어로 구분된다.

1) 하드웨어
Web 서버가 설치되어 있는 컴퓨터

2) 소프트웨어
웹 브라우저 클라이언트로부터 HTTP 요청을 받아 정적인 컨텐츠(.html .jpeg .css 등)를 제공하는 컴퓨터 프로그램

Web Server의 기능
HTTP 프로토콜을 기반으로 하여 클라이언트(웹 브라우저 또는 웹 크롤러)의 요청을 서비스 하는 기능을 담당한다.
요청에 따라 아래의 두 가지 기능 중 적절하게 선택하여 수행한다.

기능 1)
정적인 컨텐츠 제공
WAS를 거치지 않고 바로 자원을 제공한다.

기능 2)
동적인 컨텐츠 제공을 위한 요청 전달
클라이언트의 요청(Request)을 WAS에 보내고, WAS가 처리한 결과를 클라이언트에게 전달(응답, Response)한다.
클라이언트는 일반적으로 웹 브라우저를 의미한다.


WAS의 개념

DB 조회나 다양한 로직 처리를 요구하는 동적인 컨텐츠를 제공하기 위해 만들어진 Application Server
HTTP를 통해 컴퓨터나 장치에 애플리케이션을 수행해주는 미들웨어(소프트웨어 엔진)이다.
“웹 컨테이너(Web Container)” 혹은 “서블릿 컨테이너(Servlet Container)”라고도 불린다.

Container란 JSP, Servlet을 실행시킬 수 있는 소프트웨어를 말한다.
즉, WAS는 JSP, Servlet 구동 환경을 제공한다.

WAS의 역할

WAS = Web Server + Web Container
Web Server 기능들을 구조적으로 분리하여 처리하고자하는 목적으로 제시되었다.
분산 트랜잭션, 보안, 메시징, 쓰레드 처리 등의 기능을 처리하는 분산 환경에서 사용된다.
주로 DB 서버와 같이 수행된다.
현재는 WAS가 가지고 있는 Web Server도 정적인 컨텐츠를 처리하는 데 있어서 성능상 큰 차이가 없다.


3. .jsp 와 .html 의 차이는?

HTML는 바로 브라우저에 보여지는 반면 JSP는 서버에서 compile을 한 후에 HTML형식
.Html 정적
.JSP 동적 , 웹안에 자바 언어를 이용해서 프로그래밍 할 수 있다.

4.html 8장 - 조별 학습
