newBufferedWriter 함수는 IOException 을 던진다.



1.아래의 메모리를 정확히 그리시오.

		Rectangle[] recArr = new Rectangle[3];

		Scanner scanner= null;

		

		for(int i=0;i<3;i++) {

			scanner = new Scanner(System.in);

			int width = scanner.nextInt();

			int height = scanner.nextInt();

			recArr[i] = new Rectangle(width, height);

		}

		

		

		Rectangle maxRec = Rectangle.getMaxRec(recArr);



=======================

public static Rectangle getMaxRec(Rectangle[] recArr) {

		Rectangle maxRec = recArr[0];

		

		for(Rectangle rec: recArr) {			

			if(maxRec.getArea() < rec.getArea()) {

				maxRec = rec;

			}		

		}

		

		for(int i=0 ; i <recArr.length; i++) {			

			if(maxRec.getArea() < recArr[i].getArea()) {

				maxRec = recArr[i];

			}		

		}		

		return maxRec;		

	}

 

2. 예외와 에러의 다른점은?
프로그래머가 처리할 수 있는가 없는가에 따른것




3. 예외에 대한 클래스 상속도를 간단하게 그리시오.
              
                         Object
  
   Error                                     Exception

	                checked Excetpion      RuntimeException

                                                        unchecked Excetpion   



4.예전의 계산기 프로그램이 아래와 같이 에러가 난다. 예외처리를 구문을 적용하여, 죽지 않게 만드시오.



첫번째 숫자를 넣으세요:1

연산기호를 넣으세요:/

두번째 숫자를 넣으세요:3

1 / 3 = 0

continue? Y or N:y

첫번째 숫자를 넣으세요:1

연산기호를 넣으세요:/

두번째 숫자를 넣으세요:0

Exception in thread "main" java.lang.ArithmeticException: / by zero

	at Calculator.execute(Calculator.java:34)

	at CalculatorTest.main(CalculatorTest.java:69)


import java.util.Scanner;

	public class Calculator {
		
		public static int add(int num1 , int num2) {
			return num1 + num2;
		}
		public static int min(int num1 , int num2) {
			return num1 - num2;
		}
		public static int dul(int num1 , int num2) {
			return num1 * num2;
		}
		public static int div(int num1 , int num2) {
			return num1 / num2;
		}
		
		void execute() {
			char yn;
			int num1, num2, result = 0;
			String op;
			
			do {
				
			Scanner sc = new Scanner(System.in);
				
			System.out.print("첫번째 숫자를 넣으세요:");
			num1 = sc.nextInt();
			
			System.out.print("연산기호를 넣으세요:");
			op = sc.next();
			
			System.out.print("두번째 숫자를 넣으세요:");
			num2 = sc.nextInt();
			try {
			switch(op) {
			
			case "+":
				result = add(num1, num2);
				break;
			case "-":
				result = min(num1, num2);
				break;
			case "*":
				result = dul(num1, num2);
				break;
			case "/":
				result = div(num1, num2);
				break;
			
			default:
				break;
			}
			}
			catch(ArithmeticException e) {
				e.printStackTrace();
			}
			System.out.println(result);
			
			System.out.print("continue? Y or N:");
			
			yn = sc.next().charAt(0);
			
		} while(yn == 'y' || yn == 'Y');
			
			System.out.println("프로그램종료");
		}
	}

		Calculator calculator = new Calculator();
			calculator.execute();





5.예외처리 에서, 아래의 용어를 설명하시오.

-checked Excetpion이란 unchecked Exception이란?
RuntimeException을 상속하지 않는 클래스는 Checked Exception
반대로 상속한 클래스는 Unchecked Exception으로 분류할 수 있다.

		checked Excetpion				 unchecked Exception
확인 시점		컴파일 시점				런타임 시점
처리 여부		반드시 예외 처리				명시적으로 하지 않아도 됨
트랜젝션 처리	예외 발생시 롤백(roll back)하지 않음		예외 발생시 롤백해야 함
종류		IOException, ClassNotFoundException 등	NullPointException, ClassCastException 등
RuntimeException	상속하지 않음				상속함	



-finally
 try문장을 수행시 어떠한 상황에서든 무조건 실행 되는 문장이다.


-throws
메소드의 내부 소스코드에서 에러가 발생했을시 예외처리를 "rty catch" 로 자기 자신이 예외처리를
하는 것이 아니라, 이 메소드를 사용하는 곳으로 책임을 전가하는 것입니다.
