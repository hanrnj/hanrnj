
1.OS의 역할은?

응용프로그램실행과 메모리 할당


2.자바 메모리 영역에 대하여 설명하시오.

-MA  클래스파일과 static변수를 메모리에 저장

-Call stack  함수를 메모리에 저장

-heap 객체를 메모리에 저장



3.Object 클래스가 가지는 각각의 함수는?

boolean equals(Object obj) 
두 개의 객체가 같은지 비교하여 같으면 true를, 같지 않으면 false를 반환한다.

String toString() 
현재 객체의 문자열을 반환한다. 

protected Object clone() 
객체를 복사한다. 

protected void finalize() 
가비지 컬렉션 직전에 객체의 리소스를 정리할 때 호출한다. 

Class getClass() 
객체의 클래스형을 반환한다. 

int hashCode() 
객체의 코드값을 반환한다. 

void notify() 
wait된 스레드 실행을 재개할 때 호출한다. 

void notifyAll() 
wait된 모든 스레드 실행을 재개할 때 호출한다. 

void wait() 
스레드를 일시적으로 중지할 때 호출한다. 

void wait(long timeout) 
주어진 시간만큼 스레드를 일시적으로 중지할 때 호출한다. 

void wait(long timeout, int nanos) 
주어진 시간만큼 스레드를 일시적으로 중지할 때 호출한다.




4. 아래와 같이 나오도록 프로그래밍 하시오

==============================



Person person1 = new Person("jeong-pro", 27);

Person person2 = new Person("jeong-pro", 27);


System.out.println(person1.equals(person2));//true 로 반환

class Person {
	private String num;
	private int num1;
	
	public Person(String num,  int num1) {
		this.num = num;
		this.num1 = num1;
	}
	
	  @Override
	  public boolean equals(Object obj) { 
		  if((this.num == ((Person)obj).num) && (this.num1 == ((Person)obj).num1)) {
			  return true; 
		  }else 
			  return false; 
	}
}


public class Test1 {

	public static void main(String[] args) {
		Person person1 = new Person("jeong-pro", 27);

		Person person2 = new Person("jeong-pro", 27);

		System.out.println(person1.equals(person2));//true 로 반환

	}
}




5.shallow copy 와 deep copy 차이는 무엇인가?

shallow copy는 복사하는 객체가 참조하는 객체는 복사하지 않고
deep copy는 복사하는 객체가 참조하는 객체까지 같이 복사하는것입니다.



6.439 19-2 번의 문제를 푸시오.

class Business implements Cloneable{
	private String company;
	private String work;
	
	public Business(String company, String work) {
		this.company = company;
		this.work = work;
	}
	
	public void showBusinessInfo() {
		System.out.println("회사: " + company);
		System.out.println("업무: " + work);
	}
	
	@Override
	public Object clone() throws CloneNotSupportedException{
		return super.clone();
	}
}

class PersonalInfo implements Cloneable{
	private String name;
	private int age;
	private Business bz;
	
	public PersonalInfo(String name, int age, String company, String work) {
		this.name = name;
		this.age = age;
		bz = new Business(company, work);
	}
	
	
	public void showPresonalInfo() {
		System.out.println("이름: " + name);
		System.out.println("나이: " + age);
		bz.showBusinessInfo();
		
	}
	
	@Override
	public Object clone() throws CloneNotSupportedException{
			
		PersonalInfo copy = (PersonalInfo)super.clone();
		
		copy.bz = (Business)bz.clone();
		copy.name = new String(name);
		
		return copy;	
	}
		
	public void changeInfo(String name, int age, String company, String work){
		 this.name = name; 
		 this.age = age; 
		 bz = new Business(company, work); 
	}
}


public class Test {

	public static void main(String[] args) {
		PersonalInfo per = new PersonalInfo("sjk", 27, "su", "work");
		PersonalInfo cpy;
		
		try {
			cpy = (PersonalInfo)per.clone();
			per.showPresonalInfo();
			System.out.println();
			
			cpy.changeInfo("jke", 33, "ad", "ewq");
			cpy.showPresonalInfo();
		
		}
		catch(CloneNotSupportedException e) {
			e.printStackTrace();
		}
	}
}




7.431page 와 깊은복사의 메모리를 그리시오.






