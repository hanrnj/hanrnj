자바 코드로 작성하면 디버깅이 쉽다.
소스코드를 바꿔야하는 단점.

xml은 디버깅이 힘들다.
설정만 바꿔도 되니까 컨테이너를 관리하기 쉽다.



1. 아래와 같이 나오도록 프로그래밍 하시오(6월 4일 족보 문제)
==============================

Person person1 = new Person("jeong-pro", 27);
Person person2 = new Person("jeong-pro", 27);

System.out.println(person1.equals(person2));//true 로 반환


class Person {
	private String num;
	private int num1;
	
	public Person(String num,  int num1) {
		this.num = num;
		this.num1 = num1;
	}
	
	  @Override
	  public boolean equals(Object obj) { 
		  if((this.num == ((Person)obj).num) || (this.num1 == ((Person)obj).num1)) {
			  return true; 
		  }else 
			  return false; 
	}
}


public class Test1 {

	public static void main(String[] args) {
		Person person1 = new Person("jeong-pro", 27);

		Person person2 = new Person("jeong-pro", 27);

		System.out.println(person1.equals(person2));//true 로 반환

	}
}

===============================

2.scope 에서 singeton 과 prototye 의 차이에 대하여 설명하시오.

singeton은 하나의 객체를 만드는 것
prototye은 동일한 여러개의 객체를 만드는 것
scope를 디폴트 할때는 singeton


3.아래를 프로그래밍 하시오.

-원, 삼각형, 사각형의 객체를 만든후, 반지름 5, 가로 세로 5 인 각각의 넓이를 구하는 프로그램을 작성하시오.
조건) 
- Ioc 컨테이너를 통하여 객체를 생성하되 xml이 아닌 config 객체를 이용하여 생성 할것.
-각각의 객체를 아래의 인터페이스로 강제 시킬것.
- interface IShape{
	double getArea();
}

<interface>

package com.javalec.ex;

public interface IShape {
	
	double getArea();
}


<Circle클래스>

package com.javalec.ex;

public class Circle implements IShape{

	private double radius;
	
	@Override
	public double getArea() {
		
		return radius * radius * Math.PI;
	}

	public Circle() {}
	
	public Circle(double radius) {
		super();
		this.radius = radius;
	}



	public double getRadius() {
		return radius;
	}

	public void setRadius(double radius) {
		this.radius = radius;
	}

}

<Rectangle클래스>

package com.javalec.ex;

public class Rectangle implements IShape{
	
	private double width;
	private double height;
	
	@Override
	public double getArea() {
		
		return width * height;
	}

	public Rectangle() {}
	
	
	public Rectangle(double width, double height) {
		super();
		this.width = width;
		this.height = height;
	}




	public double getWidth() {
		return width;
	}

	public void setWidth(double width) {
		this.width = width;
	}

	public double getHeight() {
		return height;
	}

	public void setHeight(double height) {
		this.height = height;
	}
}

<Triangle클래스>

package com.javalec.ex;

public class Triangle implements IShape{
	
	private double width;
	private double height;
	
	@Override
	public double getArea() {
		
		return width * height * 0.5;
	}

	public Triangle() {}

	
	public Triangle(double width, double height) {
		super();
		this.width = width;
		this.height = height;
	}


	public double getWidth() {
		return width;
	}

	public void setWidth(double width) {
		this.width = width;
	}

	public double getHeight() {
		return height;
	}

	public void setHeight(double height) {
		this.height = height;
	}
}


<Bean생성 클래스>

package com.javalec.ex;

import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.context.annotation.Bean;

@Configurable
public class Area {

	@Bean
	public Circle circleArea() {
		Circle circle = new Circle(5);
		return circle;
	}
	
	@Bean
	public Rectangle rectangleArea() {
		Rectangle rectangle = new Rectangle(5,5);
		return rectangle;
	}
	
	@Bean
	public Triangle triangleArea() {
		Triangle triangle = new Triangle(5,5);
		return triangle;
	}
	
}


<Main클래스>

package com.javalec.ex;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.AbstractApplicationContext;

public class MainClass {

	public static void main(String[] args) {
		
		AbstractApplicationContext ctx = new AnnotationConfigApplicationContext(Area.class);
			
		Circle circleArea = ctx.getBean("circleArea", Circle.class);
		System.out.println(circleArea.getArea());
		
		Rectangle rectangleArea = ctx.getBean("rectangleArea", Rectangle.class);
		System.out.println(rectangleArea.getArea());
		
		Triangle triangleArea = ctx.getBean("triangleArea", Triangle.class);
		System.out.println(triangleArea.getArea());
	}

}



4. javascript 에서 함수의 2가지 종류에 대하여 만드는 법과 호출하는 방법은?

function show(){
	...
}

2) 익명 함수
var show = function (){
	...
}

**선언적함수의 경우에는 언제 어디서든지 해당 함수를 사용할 수 있지만,
익명 함수는 함수 선언 이후에서만 사용이 가능하다




==========================================
실전 면접
 자기가 모르는 부분이 있으면 어떻게 하겠느냐?


